{
    // Dynamic events helper methods.
    "functions": {
        // Initializes game EVENT variables in GAME data.
        "INIT_EVENT": {
            "args": ["$EVENT"],
            "code": [
                ["VALIDATE_NOT_EMPTY", "$EVENT", "INIT_EVENT.EVENT"],
                ["SET", "/arkhamGameEvent{{$EVENT}}", 0]
            ]
        },
        // Returns true if game EVENT can be signalled.
        "CAN_SIGNAL_EVENT": {
            "args": ["$EVENT"],
            "code": [
                ["VALIDATE_NOT_EMPTY", "$EVENT", "CAN_SIGNAL_EVENT.EVENT"],
                ["EQUAL", "$GAME.arkhamGameEvent{{$EVENT}}", 0]
            ]
        },
        // Signals game EVENT.
        "SIGNAL_EVENT": {
            "args": ["$EVENT"],
            "code": [
                ["VALIDATE_NOT_EMPTY", "$EVENT", "SIGNAL_EVENT.EVENT"],
                ["SET", "/arkhamGameEvent{{$EVENT}}", 1]
            ]
        },
        // Consumes game EVENT, so it doesn't trigger another ability.
        "CONSUME_EVENT": {
            "args": ["$EVENT"],
            "code": [
                ["VALIDATE_NOT_EMPTY", "$EVENT", "CONSUME_EVENT.EVENT"],
                ["COND",
                    ["EQUAL", "$GAME.arkhamGameEvent{{$EVENT}}", 1],
                    ["SET", "/arkhamGameEvent{{$EVENT}}", 0]
                ]
            ]
        },
        // Initializes player EVENT variables in PLAYER data.
        "INIT_PLAYER_EVENT": {
            "args": ["$PLAYER", "$EVENT"],
            "code": [
                ["VALIDATE_PLAYER", "$PLAYER", "INIT_PLAYER_EVENT.PLAYER"],
                ["VALIDATE_NOT_EMPTY", "$EVENT", "INIT_PLAYER_EVENT.EVENT"],
                ["SET", "/playerData/$PLAYER/arkhamPlayerEvent{{$EVENT}}", 0]
            ]
        },
        // Returns true if PLAYER's player EVENT can be signalled.
        "CAN_SIGNAL_PLAYER_EVENT": {
            "args": ["$PLAYER", "$EVENT"],
            "code": [
                ["VALIDATE_PLAYER", "$PLAYER", "CAN_SIGNAL_PLAYER_EVENT.PLAYER"],
                ["VALIDATE_NOT_EMPTY", "$EVENT", "CAN_SIGNAL_PLAYER_EVENT.EVENT"],
                ["EQUAL", "$PLAYER_DATA.$PLAYER.arkhamPlayerEvent{{$EVENT}}", 0]
            ]
        },
        // Signals PLAYER's player EVENT.
        "SIGNAL_PLAYER_EVENT": {
            "args": ["$PLAYER", "$EVENT"],
            "code": [
                ["VALIDATE_PLAYER", "$PLAYER", "SIGNAL_PLAYER_EVENT.PLAYER"],
                ["VALIDATE_NOT_EMPTY", "$EVENT", "SIGNAL_PLAYER_EVENT.EVENT"],
                ["SET", "/playerData/$PLAYER/arkhamPlayerEvent{{$EVENT}}", 1]
            ]
        },
        // Consumes PLAYER player EVENT, so it doesn't trigger another ability.
        "CONSUME_PLAYER_EVENT": {
            "args": ["$PLAYER", "$EVENT"],
            "code": [
                ["VALIDATE_PLAYER", "$PLAYER", "CONSUME_PLAYER_EVENT.PLAYER"],
                ["VALIDATE_NOT_EMPTY", "$EVENT", "CONSUME_PLAYER_EVENT.EVENT"],
                ["COND",
                    ["EQUAL", "$PLAYER_DATA.$PLAYER.arkhamPlayerEvent{{$EVENT}}", 1],
                    ["SET", "/playerData/$PLAYER/arkhamPlayerEvent{{$EVENT}}", 0]
                ]
            ]
        },
        // Sets the flag blocking TRIGGER_IN_PLAY_ANY from returning true for ABILITY on CARD.
        "CARD_ABILITY_ON": {
            "args": ["$CARD", {"$ABILITY": 0}],
            "code": [
                // Validation skipped.
                ["SET", "/cardById/$CARD.id/arkhamAbilityOn{{$ABILITY}}", true]
            ]
        },
        // Unsets the flag blocking TRIGGER_IN_PLAY_ANY from returning true for ABILITY on CARD.
        "CARD_ABILITY_OFF": {
            "args": ["$CARD", {"$ABILITY": 0}],
            "code": [
                // Validation skipped.
                ["UNSET", "/cardById/$CARD.id/arkhamAbilityOn{{$ABILITY}}"]
            ]
        },
        // Returns true if the ABILITY on CARD in play may trigger.
        // Standard listener: "/cardById/$THIS_ID/inPlay"
        "TRIGGER_IN_PLAY_ANY": {
            "args": ["$CARD", {"$ABILITY": 0}],
            "code": [
                // Validation skipped.
                ["AND",
                    ["EQUAL", "$CARD.inPlay", true],
                    ["NOT_EQUAL", "$CARD.arkhamAbilityOn{{$ABILITY}}", true]
                ]
            ]
        },
        // Extends TRIGGER_IN_PLAY_ANY: game EVENT must happen.
        // Standard listener: "/arkhamGameEventEVENT"
        "TRIGGER_ON_EVENT": {
            "args": ["$PLAYER", "$CARD", "$EVENT", {"$ABILITY": 0}],
            "code": [
                // Validation skipped.
                ["AND",
                    ["TRIGGER_IN_PLAY_ANY", "$CARD", "$ABILITY"],
                    ["EQUAL", "$GAME.arkhamGameEvent{{$EVENT}}", 1]
                ]
            ]
        },
        // Extends TRIGGER_IN_PLAY_ANY: CARD must be controlled by valid player.
        // Standard listener: "/cardById/$THIS_ID/inPlay"
        "TRIGGER_IN_PLAY": {
            "args": ["$CARD", {"$ABILITY": 0}],
            "code": [
                // Validation skipped.
                ["AND",
                    ["TRIGGER_IN_PLAY_ANY", "$CARD", "$ABILITY"],
                    ["IS_VALID_PLAYER", "$CARD.controller"]
                ]
            ]
        },
        // Extends TRIGGER_IN_PLAY: player EVENT must happen for PLAYER, CARD must be controlled by PLAYER.
        // Standard listener: "/playerData/*/arkhamPlayerEventEVENT"
        "TRIGGER_ON_PLAYER_EVENT": {
            "args": ["$PLAYER", "$CARD", "$EVENT", {"$ABILITY": 0}],
            "code": [
                // Validation skipped.
                ["AND",
                    ["TRIGGER_IN_PLAY", "$CARD", "$ABILITY"],
                    ["EQUAL", "$PLAYER_DATA.$PLAYER.arkhamPlayerEvent{{$EVENT}}", 1],
                    ["EQUAL", "$CARD.controller", "$PLAYER"]
                ]
            ]
        },
        // Initializes all game events in GAME data.
        // Event closing rules must be added in automation below.
        "INIT_ALL_EVENTS": {
            "args": [],
            "code": "$GAME"
        },
        // Initializes all player events in PLAYER data.
        // Event closing rules must be added in automation below.
        "INIT_ALL_PLAYER_EVENTS": {
            "args": ["$PLAYER"],
            "code": [
                ["VALIDATE_PLAYER", "$PLAYER", "INIT_ALL_PLAYER_EVENTS.PLAYER"],
                ["INIT_PLAYER_EVENT", "$PLAYER", "BeforeDraw"],
                ["INIT_PLAYER_EVENT", "$PLAYER", "Draw"]
            ]
        }
    },
    "automation": {
        "gameRules": [
            {
                "type": "trigger",
                //"priority": -100,
                "listenTo": ["/playerData/*/arkhamPlayerEventBeforeDraw"],
                "condition": ["EQUAL", "$TARGET.arkhamPlayerEventBeforeDraw", 1],
                "then": [
                    ["SET", "/playerData/$TARGET.id/arkhamPlayerEventBeforeDraw", 2],
                    ["DEFAULT_DRAW_STARTING_HAND", "$TARGET.id"]
                ]
            },
            {
                "type": "trigger",
                //"priority": -100,
                "listenTo": ["/playerData/*/arkhamPlayerEventDraw"],
                "condition": ["EQUAL", "$TARGET.arkhamPlayerEventDraw", 1],
                "then": [
                    ["SET", "/playerData/$TARGET.id/arkhamPlayerEventDraw", 2],
                    ["DEFAULT_DRAW_STARTING_HAND", "$TARGET.id"]
                ]
            }
        ]
    }
}