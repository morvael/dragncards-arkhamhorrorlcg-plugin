{
    // Dynamic events helper methods.
    "functions": {
        // Initializes game event variables in game data (counter 1, state 0).
        "INIT_EVENT": {
            "args": ["$EVENT"],
            "code": [
                ["VALIDATE_NOT_EMPTY", "$EVENT", "INIT_EVENT.EVENT"],
                ["SET", "/arkhamGameEvent{{$EVENT}}Counter", 1],
                ["SET", "/arkhamGameEvent{{$EVENT}}", 0]
            ]
        },
        // Returns true if game event can be signalled (state must be 0).
        "CAN_SIGNAL_EVENT": {
            "args": ["$EVENT"],
            "code": [
                ["VALIDATE_NOT_EMPTY", "$EVENT", "CAN_SIGNAL_EVENT.EVENT"],
                ["EQUAL", "$GAME.arkhamGameEvent{{$EVENT}}", 0]
            ]
        },
        // Signals game event (sets state to 1).
        "SIGNAL_EVENT": {
            "args": ["$EVENT"],
            "code": [
                ["VALIDATE_NOT_EMPTY", "$EVENT", "SIGNAL_EVENT.EVENT"],
                ["SET", "/arkhamGameEvent{{$EVENT}}", 1]
            ]
        },
        // Remembers this ability responded to this game event instance (by storing counter) and resets the game event (sets state to 0).
        "CONSUME_EVENT": {
            "args": ["$CARD", "$EVENT", {"$ABILITY": 0}],
            "code": [
                ["VALIDATE_NOT_NULL", "$CARD", "CONSUME_EVENT.CARD"],
                ["VALIDATE_NOT_EMPTY", "$EVENT", "CONSUME_EVENT.EVENT"],
                ["SET", "/cardById/$CARD.id/arkhamAbility{{$ABILITY}}GameEvent{{$EVENT}}Counter", "$GAME.arkhamGameEvent{{$EVENT}}Counter"],
                ["SET", "/arkhamGameEvent{{$EVENT}}", 0]
            ]
        },
        // Increases game event cancel flag and calls CONSUME_EVENT.
        "CANCEL_EVENT": {
            "args": ["$CARD", "$EVENT", {"$ABILITY": 0}],
            "code": [
                ["VALIDATE_NOT_NULL", "$CARD", "CANCEL_EVENT.CARD"],
                ["VALIDATE_NOT_EMPTY", "$EVENT", "CANCEL_EVENT.EVENT"],
                ["INCREASE_VAL", "/arkhamExecuteGameEventFlag", 1],
                ["CONSUME_EVENT", "$CARD", "$EVENT", "$ABILITY"]
            ]
        },
        // Returns true if game event can be finished (state must be 1).
        "CAN_FINISH_EVENT": {
            "args": ["$EVENT"],
            "code": [
                ["VALIDATE_NOT_EMPTY", "$EVENT", "CAN_FINISH_EVENT.EVENT"],
                ["EQUAL", "$GAME.arkhamGameEvent{{$EVENT}}", 1]
            ]
        },
        // Finishes game event (sets state to 2) and calls event loop.
        "FINISH_EVENT": {
            "args": ["$EVENT"],
            "code": [
                ["VALIDATE_NOT_EMPTY", "$EVENT", "FINISH_EVENT.EVENT"],
                ["SET", "/arkhamGameEvent{{$EVENT}}", 2],
                ["EVENT_LOOP", "$EVENT"]
            ]
        },
        // Executes game event.
        "EXECUTE_EVENT": {
            "args": ["$EVENT", "$DEFAULT_FUNCTION_NAME", "$CANCEL_FUNCTION_NAME"],
            "code": [
                ["VALIDATE_NOT_EMPTY", "$EVENT", "EXECUTE_EVENT.EVENT"],
                ["VALIDATE_NOT_EMPTY", "$DEFAULT_FUNCTION_NAME", "EXECUTE_EVENT.DEFAULT_FUNCTION_NAME"],
                ["VALIDATE_NOT_EMPTY", "$CANCEL_FUNCTION_NAME", "EXECUTE_EVENT.CANCEL_FUNCTION_NAME"],
                ["SET", "/arkhamExecuteGameEventDefault", "$DEFAULT_FUNCTION_NAME"],
                ["SET", "/arkhamExecuteGameEventCancel", "$CANCEL_FUNCTION_NAME"],
                ["SET", "/arkhamExecuteGameEventFlag", 0],
                ["INCREASE_VAL", "/arkhamGameEvent{{$EVENT}}Counter", 1],
                ["SET", "/arkhamGameEvent{{$EVENT}}", 0],
                ["EVENT_LOOP", "$EVENT"]
            ]
        },
        // Game event loop.
        "EVENT_LOOP": {
            "args": ["$EVENT"],
            "code": [
                ["VALIDATE_NOT_EMPTY", "$EVENT", "EVENT_LOOP.EVENT"],
                ["COND",
                    ["CAN_SIGNAL_EVENT", "$EVENT"],
                    ["SIGNAL_EVENT", "$EVENT"],
                    ["GREATER_THAN", "$GAME.arkhamExecuteGameEventFlag", 0],
                    [
                        ["VAR", "$MAP_RESULT", ["MAP", ["LIST", "$GAME.firstPlayer"], "$GAME.arkhamExecuteGameEventCancel"]],
                        "$MAP_RESULT.[0]"
                    ],
                    ["TRUE"],
                    [
                        ["VAR", "$MAP_RESULT", ["MAP", ["LIST", "$GAME.firstPlayer"], "$GAME.arkhamExecuteGameEventDefault"]],
                        "$MAP_RESULT.[0]"
                    ]
                ]
            ]
        },
        // Initializes player event variables in player data (counter 1, state 0).
        "INIT_PLAYER_EVENT": {
            "args": ["$PLAYER", "$EVENT"],
            "code": [
                ["VALIDATE_PLAYER", "$PLAYER", "INIT_PLAYER_EVENT.PLAYER"],
                ["VALIDATE_NOT_EMPTY", "$EVENT", "INIT_PLAYER_EVENT.EVENT"],
                ["SET", "/playerData/$PLAYER/arkhamPlayerEvent{{$EVENT}}Counter", 1],
                ["SET", "/playerData/$PLAYER/arkhamPlayerEvent{{$EVENT}}", 0]
            ]
        },
        // Returns true if player event can be signalled (state must be 0).
        "CAN_SIGNAL_PLAYER_EVENT": {
            "args": ["$PLAYER", "$EVENT"],
            "code": [
                ["VALIDATE_PLAYER", "$PLAYER", "CAN_SIGNAL_PLAYER_EVENT.PLAYER"],
                ["VALIDATE_NOT_EMPTY", "$EVENT", "CAN_SIGNAL_PLAYER_EVENT.EVENT"],
                ["EQUAL", "$PLAYER_DATA.$PLAYER.arkhamPlayerEvent{{$EVENT}}", 0]
            ]
        },
        // Signals player event (sets state to 1).
        "SIGNAL_PLAYER_EVENT": {
            "args": ["$PLAYER", "$EVENT"],
            "code": [
                ["VALIDATE_PLAYER", "$PLAYER", "SIGNAL_PLAYER_EVENT.PLAYER"],
                ["VALIDATE_NOT_EMPTY", "$EVENT", "SIGNAL_PLAYER_EVENT.EVENT"],
                ["SET", "/playerData/$PLAYER/arkhamPlayerEvent{{$EVENT}}", 1]
            ]
        },
        // Remembers this ability responded to this player event instance (by storing counter) and resets the player event (sets state to 0).
        "CONSUME_PLAYER_EVENT": {
            "args": ["$PLAYER", "$CARD", "$EVENT", {"$ABILITY": 0}],
            "code": [
                ["VALIDATE_PLAYER", "$PLAYER", "CONSUME_PLAYER_EVENT.PLAYER"],
                ["VALIDATE_NOT_NULL", "$CARD", "CONSUME_PLAYER_EVENT.CARD"],
                ["VALIDATE_NOT_EMPTY", "$EVENT", "CONSUME_PLAYER_EVENT.EVENT"],
                ["SET", "/cardById/$CARD.id/arkhamAbility{{$ABILITY}}PlayerEvent{{$EVENT}}Counter", "$PLAYER_DATA.$PLAYER.arkhamPlayerEvent{{$EVENT}}Counter"],
                ["SET", "/playerData/$PLAYER/arkhamPlayerEvent{{$EVENT}}", 0]
            ]
        },
        // Increases player event cancel flag and calls CONSUME_PLAYER_EVENT.
        "CANCEL_PLAYER_EVENT": {
            "args": ["$PLAYER", "$CARD", "$EVENT", {"$ABILITY": 0}],
            "code": [
                ["VALIDATE_PLAYER", "$PLAYER", "CANCEL_PLAYER_EVENT.PLAYER"],
                ["VALIDATE_NOT_NULL", "$CARD", "CANCEL_PLAYER_EVENT.CARD"],
                ["VALIDATE_NOT_EMPTY", "$EVENT", "CANCEL_PLAYER_EVENT.EVENT"],
                ["INCREASE_VAL", "/playerData/$PLAYER/arkhamExecutePlayerEventFlag", 1],
                ["CONSUME_PLAYER_EVENT", "$PLAYER", "$CARD", "$EVENT", "$ABILITY"]
            ]
        },
        // Returns true if player event can be finished (state must be 1).
        "CAN_FINISH_PLAYER_EVENT": {
            "args": ["$PLAYER", "$EVENT"],
            "code": [
                ["VALIDATE_PLAYER", "$PLAYER", "CAN_FINISH_PLAYER_EVENT.PLAYER"],
                ["VALIDATE_NOT_EMPTY", "$EVENT", "CAN_FINISH_PLAYER_EVENT.EVENT"],
                ["EQUAL", "$PLAYER_DATA.$PLAYER.arkhamPlayerEvent{{$EVENT}}", 1]
            ]
        },
        // Finishes player event (sets state to 2) and calls event loop.
        "FINISH_PLAYER_EVENT": {
            "args": ["$PLAYER", "$EVENT"],
            "code": [
                ["VALIDATE_PLAYER", "$PLAYER", "FINISH_PLAYER_EVENT.PLAYER"],
                ["VALIDATE_NOT_EMPTY", "$EVENT", "FINISH_PLAYER_EVENT.EVENT"],
                ["SET", "/playerData/$PLAYER/arkhamPlayerEvent{{$EVENT}}", 2],
                ["PLAYER_EVENT_LOOP", "$PLAYER", "$EVENT"]
            ]
        },
        // Executes player event.
        "EXECUTE_PLAYER_EVENT": {
            "args": ["$PLAYER", "$EVENT", "$DEFAULT_FUNCTION_NAME", "$CANCEL_FUNCTION_NAME"],
            "code": [
                ["VALIDATE_PLAYER", "$PLAYER", "EXECUTE_PLAYER_EVENT.PLAYER"],
                ["VALIDATE_NOT_EMPTY", "$EVENT", "EXECUTE_PLAYER_EVENT.EVENT"],
                ["VALIDATE_NOT_EMPTY", "$DEFAULT_FUNCTION_NAME", "EXECUTE_PLAYER_EVENT.DEFAULT_FUNCTION_NAME"],
                ["VALIDATE_NOT_EMPTY", "$CANCEL_FUNCTION_NAME", "EXECUTE_PLAYER_EVENT.CANCEL_FUNCTION_NAME"],
                ["SET", "/playerData/$PLAYER/arkhamExecutePlayerEventDefault", "$DEFAULT_FUNCTION_NAME"],
                ["SET", "/playerData/$PLAYER/arkhamExecutePlayerEventCancel", "$CANCEL_FUNCTION_NAME"],
                ["SET", "/playerData/$PLAYER/arkhamExecutePlayerEventFlag", 0],
                ["INCREASE_VAL", "/playerData/$PLAYER/arkhamPlayerEvent{{$EVENT}}Counter", 1],
                ["SET", "/playerData/$PLAYER/arkhamPlayerEvent{{$EVENT}}", 0],
                ["PLAYER_EVENT_LOOP", "$PLAYER", "$EVENT"]
            ]
        },
        // Player event loop.
        "PLAYER_EVENT_LOOP": {
            "args": ["$PLAYER", "$EVENT"],
            "code": [
                ["VALIDATE_PLAYER", "$PLAYER", "PLAYER_EVENT_LOOP.PLAYER"],
                ["VALIDATE_NOT_EMPTY", "$EVENT", "PLAYER_EVENT_LOOP.EVENT"],
                ["COND",
                    ["CAN_SIGNAL_PLAYER_EVENT", "$PLAYER", "$EVENT"],
                    ["SIGNAL_PLAYER_EVENT", "$PLAYER", "$EVENT"],
                    ["GREATER_THAN", "$PLAYER_DATA.$PLAYER.arkhamExecutePlayerEventFlag", 0],
                    [
                        ["VAR", "$MAP_RESULT", ["MAP", ["LIST", "$PLAYER"], "$PLAYER_DATA.$PLAYER.arkhamExecutePlayerEventCancel"]],
                        "$MAP_RESULT.[0]"
                    ],
                    ["TRUE"],
                    [
                        ["VAR", "$MAP_RESULT", ["MAP", ["LIST", "$PLAYER"], "$PLAYER_DATA.$PLAYER.arkhamExecutePlayerEventDefault"]],
                        "$MAP_RESULT.[0]"
                    ]
                ]
            ]
        },
        // Sets the flag blocking TRIGGER_IN_PLAY_ANY from returning true for ABILITY on CARD.
        "CARD_ABILITY_ON": {
            "args": ["$CARD", {"$ABILITY": 0}],
            "code": [
                // Validation skipped.
                ["SET", "/cardById/$CARD.id/arkhamAbilityOn{{$ABILITY}}", true]
            ]
        },
        // Unsets the flag blocking TRIGGER_IN_PLAY_ANY from returning true for ABILITY on CARD.
        "CARD_ABILITY_OFF": {
            "args": ["$CARD", {"$ABILITY": 0}],
            "code": [
                // Validation skipped.
                ["UNSET", "/cardById/$CARD.id/arkhamAbilityOn{{$ABILITY}}"]
            ]
        },
        // Returns true if the ABILITY on CARD in play may trigger.
        // Standard listener: "/cardById/$THIS_ID/inPlay"
        "TRIGGER_IN_PLAY_ANY": {
            "args": ["$CARD", {"$ABILITY": 0}],
            "code": [
                // Validation skipped.
                ["AND",
                    ["EQUAL", "$CARD.inPlay", true],
                    ["NOT_EQUAL", "$CARD.arkhamAbilityOn{{$ABILITY}}", true]
                ]
            ]
        },
        // Extends TRIGGER_IN_PLAY_ANY: game EVENT must happen.
        // Standard listener: "/arkhamGameEventEVENT"
        "TRIGGER_ON_EVENT": {
            "args": ["$CARD", "$EVENT", {"$ABILITY": 0}],
            "code": [
                // Validation skipped.
                ["AND",
                    ["TRIGGER_IN_PLAY_ANY", "$CARD", "$ABILITY"],
                    ["EQUAL", "$GAME.arkhamGameEvent{{$EVENT}}", 1],
                    ["GREATER_THAN", "$GAME.arkhamGameEvent{{$EVENT}}Counter", ["GET_CARD_PROPERTY", "$CARD.id", "arkhamAbility{{$ABILITY}}GameEvent{{$EVENT}}Counter", 0]]
                ]
            ]
        },
        // Extends TRIGGER_IN_PLAY_ANY: CARD must be controlled by valid player.
        // Standard listener: "/cardById/$THIS_ID/inPlay"
        "TRIGGER_IN_PLAY": {
            "args": ["$CARD", {"$ABILITY": 0}],
            "code": [
                // Validation skipped.
                ["AND",
                    ["TRIGGER_IN_PLAY_ANY", "$CARD", "$ABILITY"],
                    ["IS_VALID_PLAYER", "$CARD.controller"]
                ]
            ]
        },
        // Extends TRIGGER_IN_PLAY: player EVENT must happen for PLAYER, CARD must be controlled by PLAYER.
        // Standard listener: "/playerData/*/arkhamPlayerEventEVENT"
        "TRIGGER_ON_PLAYER_EVENT": {
            "args": ["$PLAYER", "$CARD", "$EVENT", {"$ABILITY": 0}],
            "code": [
                // Validation skipped.
                ["AND",
                    ["TRIGGER_IN_PLAY", "$CARD", "$ABILITY"],
                    ["EQUAL", "$PLAYER_DATA.$PLAYER.arkhamPlayerEvent{{$EVENT}}", 1],
                    ["EQUAL", "$CARD.controller", "$PLAYER"],
                    ["GREATER_THAN", "$PLAYER_DATA.$PLAYER.arkhamPlayerEvent{{$EVENT}}Counter", ["GET_CARD_PROPERTY", "$CARD.id", "arkhamAbility{{$ABILITY}}PlayerEvent{{$EVENT}}Counter", 0]]
                ]
            ]
        },
        // Initializes all game events in GAME data.
        // Event closing rules must be added in automation below.
        "INIT_ALL_EVENTS": {
            "args": [],
            "code": "$GAME"
        },
        // Initializes all player events in PLAYER data.
        // Event closing rules must be added in automation below.
        "INIT_ALL_PLAYER_EVENTS": {
            "args": ["$PLAYER"],
            "code": [
                ["VALIDATE_PLAYER", "$PLAYER", "INIT_ALL_PLAYER_EVENTS.PLAYER"],
                ["INIT_PLAYER_EVENT", "$PLAYER", "BeforeDraw"],
                ["INIT_PLAYER_EVENT", "$PLAYER", "Draw"],
                ["INIT_PLAYER_EVENT", "$PLAYER", "AfterDraw"],
                ["INIT_PLAYER_EVENT", "$PLAYER", "UpkeepDraw"]
            ]
        }
    },
    "automation": {
        "gameRules": {
            "eventsEndBeforeDraw": {
                "type": "trigger",
                "priority": 1000,
                "listenTo": ["/playerData/*/arkhamPlayerEventBeforeDraw"],
                "condition": ["CAN_FINISH_PLAYER_EVENT", "$TARGET.id", "BeforeDraw"],
                "then": [
                    ["FINISH_PLAYER_EVENT", "$TARGET.id", "BeforeDraw"]
                ]
            },
            "eventsEndDraw": {
                "type": "trigger",
                "priority": 1000,
                "listenTo": ["/playerData/*/arkhamPlayerEventDraw"],
                "condition": ["CAN_FINISH_PLAYER_EVENT", "$TARGET.id", "Draw"],
                "then": [
                    ["FINISH_PLAYER_EVENT", "$TARGET.id", "Draw"]
                ]
            },
            "eventsEndAfterDraw": {
                "type": "trigger",
                "priority": 1000,
                "listenTo": ["/playerData/*/arkhamPlayerEventAfterDraw"],
                "condition": ["CAN_FINISH_PLAYER_EVENT", "$TARGET.id", "AfterDraw"],
                "then": [
                    ["FINISH_PLAYER_EVENT", "$TARGET.id", "AfterDraw"]
                ]
            },
            "eventsEndUpkeepDraw": {
                "type": "trigger",
                "priority": 1000,
                "listenTo": ["/playerData/*/arkhamPlayerEventUpkeepDraw"],
                "condition": ["CAN_FINISH_PLAYER_EVENT", "$TARGET.id", "UpkeepDraw"],
                "then": [
                    ["FINISH_PLAYER_EVENT", "$TARGET.id", "UpkeepDraw"]
                ]
            }
        }
    }
}